{
  "version": 3,
  "sources": ["../src/co2.js", "../src/1byte.js"],
  "sourcesContent": ["\"use strict\";\n\nimport Onebyte from \"./1byte\";\n\nclass CO2 {\n  constructor(options) {\n    this.options = options;\n\n    // default model\n    this.model = new Onebyte();\n\n    if (options) {\n      this.model = new options.model();\n    }\n  }\n\n  /**\n   * Accept a figure in bytes for data transfer, and a boolean for whether\n   * the domain shows as 'green', and return a CO2 figure for energy used to shift the corresponding\n   * the data transfer.\n   *\n   * @param {number} bytes\n   * @param {boolean} green\n   * @return {number} the amount of CO2 in grammes\n   */\n  perByte(bytes, green) {\n    return this.model.perByte(bytes, green);\n  }\n\n  perDomain(pageXray, greenDomains) {\n    const co2PerDomain = [];\n    for (let domain of Object.keys(pageXray.domains)) {\n      let co2;\n      if (greenDomains && greenDomains.indexOf(domain) > -1) {\n        co2 = this.perByte(pageXray.domains[domain].transferSize, true);\n      } else {\n        co2 = this.perByte(pageXray.domains[domain].transferSize);\n      }\n      co2PerDomain.push({\n        domain,\n        co2,\n        transferSize: pageXray.domains[domain].transferSize,\n      });\n    }\n    co2PerDomain.sort((a, b) => b.co2 - a.co2);\n\n    return co2PerDomain;\n  }\n\n  perPage(pageXray, green) {\n    // Accept an xray object, and if we receive a boolean as the second\n    // argument, we assume every request we make is sent to a server\n    // running on renwewable power.\n\n    // if we receive an array of domains, return a number accounting the\n    // reduced CO2 from green hosted domains\n\n    const domainCO2 = this.perDomain(pageXray, green);\n    let totalCO2 = 0;\n    for (let domain of domainCO2) {\n      totalCO2 += domain.co2;\n    }\n    return totalCO2;\n  }\n\n  perContentType(pageXray, greenDomains) {\n    const co2PerContentType = {};\n    for (let asset of pageXray.assets) {\n      const domain = new URL(asset.url).domain;\n      const transferSize = asset.transferSize;\n      const co2ForTransfer = this.perByte(\n        transferSize,\n        greenDomains && greenDomains.indexOf(domain) > -1\n      );\n      const contentType = asset.type;\n      if (!co2PerContentType[contentType]) {\n        co2PerContentType[contentType] = { co2: 0, transferSize: 0 };\n      }\n      co2PerContentType[contentType].co2 += co2ForTransfer;\n      co2PerContentType[contentType].transferSize += transferSize;\n    }\n    // restructure and sort\n    const all = [];\n    for (let type of Object.keys(co2PerContentType)) {\n      all.push({\n        type,\n        co2: co2PerContentType[type].co2,\n        transferSize: co2PerContentType[type].transferSize,\n      });\n    }\n    all.sort((a, b) => b.co2 - a.co2);\n    return all;\n  }\n\n  dirtiestResources(pageXray, greenDomains) {\n    const allAssets = [];\n    for (let asset of pageXray.assets) {\n      const domain = new URL(asset.url).domain;\n      const transferSize = asset.transferSize;\n      const co2ForTransfer = this.perByte(\n        transferSize,\n        greenDomains && greenDomains.indexOf(domain) > -1\n      );\n      allAssets.push({ url: asset.url, co2: co2ForTransfer, transferSize });\n    }\n    allAssets.sort((a, b) => b.co2 - a.co2);\n\n    return allAssets.slice(0, allAssets.length > 10 ? 10 : allAssets.length);\n  }\n\n  perParty(pageXray, greenDomains) {\n    let firstParty = 0;\n    let thirdParty = 0;\n    // calculate co2 per first/third party\n    const firstPartyRegEx = pageXray.firstPartyRegEx;\n    for (let d of Object.keys(pageXray.domains)) {\n      if (!d.match(firstPartyRegEx)) {\n        thirdParty += this.perByte(\n          pageXray.domains[d].transferSize,\n          greenDomains && greenDomains.indexOf(d) > -1\n        );\n      } else {\n        firstParty += this.perByte(\n          pageXray.domains[d].transferSize,\n          greenDomains && greenDomains.indexOf(d) > -1\n        );\n      }\n    }\n    return { firstParty, thirdParty };\n  }\n}\n\n// for commonjs 'require' approach\n// module.exports = CO2;\n// for ES6 'import' approach\nexport { CO2 };\nexport default CO2;\n", "// Use the 1byte model for now from the Shift Project, and assume a US grid mix figure they use of around 519 g co2 for the time being. It's lower for Europe, and in particular, France, but for v1, we don't include this\nconst CO2_PER_KWH_IN_DC_GREY = 519;\n\n// this figure is from the IEA's 2018 report for a global average:\nconst CO2_PER_KWH_NETWORK_GREY = 475;\n\n// TODO - these figures need to be updated, as the figures for green\n// shouldn't really be zero now we know that carbon intensity figures\n// for renewables still usually include the life cycle emissions\nconst CO2_PER_KWH_IN_DC_GREEN = 0;\n\n// the 1 byte model gives figures for energy usage for:\n\n// datacentres\n// networks\n// the device used to access a site/app\n\n// The device usage figure combines figures for:\n//  1. the usage for devices (which is small proportion of the energy use)\n//  2. the *making* the device, which is comparatively high.\n\nconst KWH_PER_BYTE_IN_DC = 7.2e-11;\n\n// this is probably best left as something users can define, or\n// a weighted average based on total usage.\n// Using a simple mean for now, as while web traffic to end users might trend\n// towards wifi and mobile,\n// Web traffic between servers is likely wired networks\n\nconst FIXED_NETWORK_WIRED = 4.29e-10;\nconst FIXED_NETWORK_WIFI = 1.52e-10;\nconst FOUR_G_MOBILE = 8.84e-10;\n\n// Pull requests gratefully accepted\nconst KWH_PER_BYTE_FOR_NETWORK =\n  (FIXED_NETWORK_WIRED + FIXED_NETWORK_WIFI + FOUR_G_MOBILE) / 3;\n\nconst KWH_PER_BYTE_FOR_DEVICES = 1.3e-10;\n\nclass OneByte {\n  constructor(options) {\n    this.options = options;\n\n    this.KWH_PER_BYTE_FOR_NETWORK = KWH_PER_BYTE_FOR_NETWORK;\n  }\n\n  perByte(bytes, green) {\n    if (bytes < 1) {\n      return 0;\n    }\n\n    if (green) {\n      // if we have a green datacentre, use the lower figure for renewable energy\n      const Co2ForDC = bytes * KWH_PER_BYTE_IN_DC * CO2_PER_KWH_IN_DC_GREEN;\n\n      // but for the worest of the internet, we can't easily check, so assume\n      // grey for now\n      const Co2forNetwork =\n        bytes * KWH_PER_BYTE_FOR_NETWORK * CO2_PER_KWH_NETWORK_GREY;\n\n      return Co2ForDC + Co2forNetwork;\n    }\n\n    const KwHPerByte = KWH_PER_BYTE_IN_DC + KWH_PER_BYTE_FOR_NETWORK;\n    return bytes * KwHPerByte * CO2_PER_KWH_IN_DC_GREY;\n  }\n}\n\nexport { OneByte };\nexport default OneByte;\n"],
  "mappings": "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",
  "names": []
}
